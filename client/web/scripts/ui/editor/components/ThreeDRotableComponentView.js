// Generated by CoffeeScript 1.3.3
/*
@author Matt Crinklaw-Vogt
*/

define(["./ComponentView", "../Templates"], function(ComponentView) {
  var twoPI;
  twoPI = Math.PI * 2;
  return ComponentView.extend({
    transforms: ["rotateX", "rotateY", "rotateZ", "scale"],
    events: function() {
      return {
        "mousedown": "mousedown",
        "click": "clicked",
        "deltadrag span[data-delta='rotateX']": "rotateX",
        "deltadrag span[data-delta='rotateY']": "rotateY",
        "deltadrag span[data-delta='rotateZ']": "rotateZ",
        "deltadragStart span[data-delta='rotateX']": "rotateXStart",
        "deltadragStart span[data-delta='rotateY']": "rotateYStart",
        "deltadragStart span[data-delta='rotateZ']": "rotateZStart"
      };
    },
    initialize: function() {
      return ComponentView.prototype.initialize.apply(this, arguments);
    },
    rotateX: function(e, deltas) {
      var rot;
      rot = (deltas.dy * .02) % twoPI;
      this.model.set("rotateX", this._initialRotX + rot);
      return this._setUpdatedTransform();
    },
    rotateY: function(e, deltas) {
      var rot;
      rot = (deltas.dx * .02) % twoPI;
      this.model.set("rotateY", this._initialRotY + rot);
      return this._setUpdatedTransform();
    },
    rotateZ: function(e, deltas) {
      var rot;
      rot = this._calcRot(deltas);
      this.model.set("rotateZ", this._initialRotZ + rot - this._rotZOffset);
      return this._setUpdatedTransform();
    },
    rotateXStart: function(e, deltas) {
      this.updateOrigin();
      this._rotXOffset = this._calcRot(deltas);
      return this._initialRotX = this.model.get("rotateX") || 0;
    },
    rotateYStart: function(e, deltas) {
      this.updateOrigin();
      this._rotYOffset = this._calcRot(deltas);
      return this._initialRotY = this.model.get("rotateY") || 0;
    },
    rotateZStart: function(e, deltas) {
      this.updateOrigin();
      this._rotZOffset = this._calcRot(deltas);
      return this._initialRotZ = this.model.get("rotateZ") || 0;
    },
    __getTemplate: function() {
      return Templates.ThreeDRotableComponentView;
    },
    constructor: function ThreeDRotableComponentView() {
			ComponentView.prototype.constructor.apply(this, arguments);
		}
  });
});
